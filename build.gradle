plugins {
	id "java";
	id "signing";
	id "maven-publish";
	id "jp.empressia.gradle.plugin.misc" version "1.0.5";
}

ext.moduleName = "jp.empressia.enterprise.security.oidc";
ext.junitVersion = "5.7.0";
ext.hamcrestVersion = "2.2";
ext.jmockitVersion = "1.49";
archivesBaseName = moduleName;

repositories {
	mavenCentral();
}

dependencies {
	// use CDI.
	compileOnly(group:"jakarta.enterprise", name:"jakarta.enterprise.cdi-api", version:"2.0.2");
	// use Java EE Security API.
	compileOnly(group:"jakarta.security.enterprise", name:"jakarta.security.enterprise-api", version:"1.0.2");
	// use HttpServletRequest, HttpServletResponse
	compileOnly(group:"jakarta.servlet", name:"jakarta.servlet-api", version:"4.0.2");
	// use for security interceptor priority.
	compileOnly(group:"jakarta.annotation", name:"jakarta.annotation-api", version:"1.3.5");
	// use MicroProfile Config API.
	compileOnly(group:"org.eclipse.microprofile.config", name:"microprofile-config-api", version:"2.0");
	// suppress unknown enum constant warning.
	compileOnly(group:"org.osgi", name:"osgi.annotation", version:"7.0.0");
	// use JCache for security token cache (not in Jave EE 8).
	compileOnly(group:"javax.cache", name:"cache-api", version:"1.1.1");
	// use for JWT.
	runtimeOnly(group:"io.jsonwebtoken", name:"jjwt-impl", version:"0.11.2");
	implementation(group:"io.jsonwebtoken", name:"jjwt-jackson", version:"0.11.2");

	// use JUnit test framework.
	testImplementation(group:"org.junit.jupiter", name:"junit-jupiter-api", version:junitVersion);
	testRuntimeOnly(group:"org.junit.jupiter", name:"junit-jupiter-engine", version:junitVersion);
	testImplementation(group:"org.hamcrest", name:"hamcrest", version:hamcrestVersion);
	// use JMockit.
	testImplementation(group:"org.jmockit", name:"jmockit", version:jmockitVersion);
	// use Java EE Security API.
	testImplementation(group:"jakarta.security.enterprise", name:"jakarta.security.enterprise-api", version:"1.0.2");
	// use HttpServletRequest, HttpServletResponse
	testImplementation(group:"jakarta.servlet", name:"jakarta.servlet-api", version:"4.0.2");
}

task copySyncTestJavaAgent(type: jp.empressia.gradle.task.CopySync) {
	from = test.classpath.filter({ it.name.contains("jmockit") });
	into = file("${buildDir}/TestJavaAgent");
}

tasks.withType(JavaCompile) {
	options.encoding "UTF-8";
	options.release = 11;
	options.compilerArgs << "-parameters";
}

java {
	withJavadocJar();
	withSourcesJar();
}

jar {
	manifest {
		attributes (
			"Automatic-Module-Name": moduleName
		);
	}
}

javadoc {
	options.charSet "UTF-8";
	options.encoding "UTF-8";
	options.addBooleanOption("html5", true);
	options.addStringOption("Xdoclint:none", "-quiet");
}

test {
	useJUnitPlatform();
    jvmArgs "-javaagent:${classpath.find { it.name.contains("jmockit") }.absolutePath}";
}

publishing {
	publications {
		maven(MavenPublication) {
			groupId = "jp.empressia";
			artifactId = moduleName;
			from components.java;
			// for Maven Central.
			pom {
				name = "Empressia OpenID Connect";
				description = "OpenID Connect for Java EE Security (Jakarta Security).";
				url = "https://github.com/Empressia/EmpressiaOpenIDConnect";
				licenses {
					license {
						name = "zlib License";
						comments = "If you want to use this with a team (multiple people), select the MIT license.";
					}
					license {
						name = "MIT License";
						comments = "If you want to use this with a team (multiple people), select the MIT license.";
					}
				}
				developers {
					developer {
						// The unique ID of this developer in the SCM.
						id = "Empressia";
					}
				}
				scm {
					connection = "scm:git:https://github.com/Empressia/EmpressiaOpenIDConnect.git"
					url = "https://github.com/Empressia/EmpressiaOpenIDConnect.git"
				}
			}
		}
	}
	repositories {
		// publishMavenPublicationToLocalNetworkRepository
		maven {
			name = "LocalNetwork";
			url = local_network_repository_url;
		}
		// publishMavenPublicationToMavenCentralRepository
		maven {
			name = "MavenCentral";
			def releasesRepoUrl = sonatype_release_repository_url;
			def snapshotsRepoUrl = sonatype_snapshot_repository_url;
			url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl;
			credentials {
				username = sonatype_username;
				password = sonatype_password;
			}
		}
	}
}

signing {
	sign publishing.publications.maven;
}
